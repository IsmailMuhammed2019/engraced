// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  phone         String?
  address       String?
  isActive      Boolean   @default(true)
  emailVerified Boolean  @default(false)
  role          UserRole  @default(CUSTOMER)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  bookings     Booking[]
  reviews      Review[]
  notifications Notification[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      AdminRole @default(ADMIN)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  routes    Route[]
  bookings  Booking[]
  notifications Notification[]
  refreshTokens AdminRefreshToken[]

  @@map("admins")
}

model Route {
  id          String   @id @default(cuid())
  from        String
  to          String
  distance    Int      // in kilometers
  duration    Int      // in minutes
  basePrice   Decimal  @db.Decimal(10, 2)
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  adminId     String
  admin       Admin    @relation(fields: [adminId], references: [id])
  trips       Trip[]
  bookings    Booking[]

  @@unique([from, to])
  @@map("routes")
}

model Trip {
  id           String      @id @default(cuid())
  routeId      String
  driverId     String
  vehicleId    String
  promotionId  String?     // Optional promotion
  departureTime DateTime
  arrivalTime  DateTime
  price        Decimal     @db.Decimal(10, 2)
  maxPassengers Int        @default(7) // Sienna capacity
  status       TripStatus  @default(ACTIVE)
  features     String[]    // JSON array of features
  amenities    String[]    // JSON array of amenities
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  route        Route       @relation(fields: [routeId], references: [id])
  driver       Driver      @relation(fields: [driverId], references: [id])
  vehicle      Vehicle     @relation(fields: [vehicleId], references: [id])
  promotion    Promotion?  @relation(fields: [promotionId], references: [id])
  bookings     Booking[]
  seats        Seat[]

  @@map("trips")
}

model Booking {
  id            String        @id @default(cuid())
  bookingNumber String        @unique
  userId        String?
  adminId       String?
  routeId       String
  tripId        String
  promotionId   String?
  passengerCount Int          @default(1)
  totalAmount   Decimal       @db.Decimal(10, 2)
  discountAmount Decimal      @default(0) @db.Decimal(10, 2)
  status        BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  contactInfo   Json          // JSON object with contact details
  passengerDetails Json       // Array of passenger details
  seatNumbers   String[]      // Array of seat numbers
  notes         String?
  receiptUrl    String?       // URL to downloadable receipt
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user          User?         @relation(fields: [userId], references: [id])
  admin         Admin?        @relation(fields: [adminId], references: [id])
  route         Route         @relation(fields: [routeId], references: [id])
  trip          Trip          @relation(fields: [tripId], references: [id])
  promotion     Promotion?    @relation(fields: [promotionId], references: [id])
  payment       Payment?
  seats         Seat[]

  @@map("bookings")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  routeId   String
  rating    Int      @db.SmallInt // 1-5 stars
  comment   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, routeId])
  @@map("reviews")
}

model Driver {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String   @unique
  phone       String
  licenseNumber String @unique
  licenseExpiry DateTime
  address     String
  profileImage String? // Cloudinary image URL
  isActive    Boolean  @default(true)
  rating      Float    @default(5.0)
  experience  Int      @default(0) // years of experience
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  trips       Trip[]

  @@map("drivers")
}

model Vehicle {
  id          String   @id @default(cuid())
  plateNumber String   @unique
  make        String   @default("Toyota")
  model       String   @default("Sienna")
  year        Int
  capacity    Int      @default(7) // 1 front + 6 back
  features    String[] // ["AC", "WiFi", "USB Charging", "Reclining Seats"]
  images      String[] // Array of Cloudinary image URLs
  isActive    Boolean  @default(true)
  mileage     Int      @default(0)
  lastService DateTime?
  nextService DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  trips       Trip[]

  @@map("vehicles")
}

model Seat {
  id          String   @id @default(cuid())
  tripId      String
  seatNumber  String   // "A1", "B1", "B2", etc.
  isBooked    Boolean  @default(false)
  bookingId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  trip        Trip     @relation(fields: [tripId], references: [id])
  booking     Booking? @relation(fields: [bookingId], references: [id])

  @@unique([tripId, seatNumber])
  @@map("seats")
}

model Payment {
  id              String        @id @default(cuid())
  bookingId       String        @unique
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("NGN")
  paystackRef     String        @unique
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?       // card, bank_transfer, etc.
  paymentDate     DateTime?
  failureReason   String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  booking         Booking       @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String?
  adminId   String?
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  data      Json?            // Additional data for the notification
  createdAt DateTime         @default(now())

  // Relations
  user      User?            @relation(fields: [userId], references: [id])
  admin     Admin?           @relation(fields: [adminId], references: [id])

  @@map("notifications")
}

model Promotion {
  id          String     @id @default(cuid())
  title       String
  description String
  code        String?    @unique
  type        PromoType  // PERCENTAGE, FIXED_AMOUNT, FREE_RIDE
  value       Decimal    @db.Decimal(10, 2)
  minAmount   Decimal?   @db.Decimal(10, 2)
  maxDiscount Decimal?   @db.Decimal(10, 2)
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean    @default(true)
  usageLimit  Int?       // null means unlimited
  usedCount   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  bookings    Booking[]
  trips       Trip[]

  @@map("promotions")
}

model SystemSettings {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string") // string, number, boolean, json

  @@map("system_settings")
}

enum UserRole {
  CUSTOMER
  VIP
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

enum TripStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  COMPLETED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum NotificationType {
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  TRIP_REMINDER
  TRIP_DELAYED
  TRIP_CANCELLED
  PROMOTION
  SYSTEM_UPDATE
}

enum PromoType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_RIDE
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model AdminRefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  adminId   String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_refresh_tokens")
}

model RateLimit {
  id         String   @id @default(cuid())
  identifier String   // IP address or user ID
  action     String   // login, register, etc.
  createdAt  DateTime @default(now())

  @@map("rate_limits")
}
